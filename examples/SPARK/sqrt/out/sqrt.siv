*****************************************************************************
                       Semantic Analysis of SPARK Text
                              Examiner GPL 2011
             Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.
*****************************************************************************


CREATED 06-SEP-2011, 23:49:00  SIMPLIFIED 06-SEP-2011, 23:49:18

SPARK Simplifier GPL 2011
Copyright (C) 2011 Altran Praxis Limited, Bath, U.K.

procedure sqrt




For path(s) from start to run-time check associated with statement of line 12:

procedure_sqrt_1.
*** true .          /* all conclusions proved */


For path(s) from start to precondition check associated with statement of line 
          13:

procedure_sqrt_2.
H1:    1 <= x .
H2:    x <= 2 .
H3:    float__size >= 0 .
       ->
C1:    numeric__times(1 / 2, x) >= - 340282000000000000000000000000000000000 .
C2:    numeric__times(1 / 2, x) <= 340282000000000000000000000000000000000 .


For path(s) from start to precondition check associated with statement of line 
          13:

procedure_sqrt_3.
H1:    1 <= x .
H2:    x <= 2 .
H3:    numeric__times(1 / 2, x) >= - 340282000000000000000000000000000000000 .
H4:    numeric__times(1 / 2, x) <= 340282000000000000000000000000000000000 .
H5:    float__size >= 0 .
       ->
C1:    numeric__plus(numeric__times(1 / 2, x), 1 / 2) >= - 
          340282000000000000000000000000000000000 .
C2:    numeric__plus(numeric__times(1 / 2, x), 1 / 2) <= 
          340282000000000000000000000000000000000 .


For path(s) from start to run-time check associated with statement of line 13:

procedure_sqrt_4.
*** true .          /* all conclusions proved */


For path(s) from start to assertion of line 15:

procedure_sqrt_5.
H1:    1 <= x .
H2:    x <= 2 .
H3:    numeric__times(1 / 2, x) >= - 340282000000000000000000000000000000000 .
H4:    numeric__times(1 / 2, x) <= 340282000000000000000000000000000000000 .
H5:    numeric__plus(numeric__times(1 / 2, x), 1 / 2) >= - 
          340282000000000000000000000000000000000 .
H6:    numeric__plus(numeric__times(1 / 2, x), 1 / 2) <= 
          340282000000000000000000000000000000000 .
H7:    numeric__plus(numeric__times(1 / 2, x), 1 / 2) <> x .
H8:    float__size >= 0 .
       ->
C1:    numeric__plus(numeric__times(1 / 2, x), 1 / 2) >= - (1 / 4 * (x * x)) + 
          x .
C2:    numeric__plus(numeric__times(1 / 2, x), 1 / 2) <= 1 / 4 * (x * x) + 1 .


For path(s) from assertion of line 15 to assertion of line 15:

procedure_sqrt_6.
H1:    r >= - (1 / 4 * (x * x)) + x .
H2:    r <= 1 / 4 * (x * x) + 1 .
H3:    1 <= x .
H4:    x <= 2 .
H5:    r >= - 340282000000000000000000000000000000000 .
H6:    r <= 340282000000000000000000000000000000000 .
H7:    numeric__divide(x, r) >= - 340282000000000000000000000000000000000 .
H8:    numeric__divide(x, r) <= 340282000000000000000000000000000000000 .
H9:    numeric__plus(r, numeric__divide(x, r)) >= - 
          340282000000000000000000000000000000000 .
H10:   numeric__plus(r, numeric__divide(x, r)) <= 
          340282000000000000000000000000000000000 .
H11:   numeric__times(1 / 2, numeric__plus(r, numeric__divide(x, r))) >= - 
          340282000000000000000000000000000000000 .
H12:   numeric__times(1 / 2, numeric__plus(r, numeric__divide(x, r))) <= 
          340282000000000000000000000000000000000 .
H13:   numeric__times(1 / 2, numeric__plus(r, numeric__divide(x, r))) <> r .
H14:   float__size >= 0 .
       ->
C1:    numeric__times(1 / 2, numeric__plus(r, numeric__divide(x, r))) >= - (1 / 
          4 * (x * x)) + x .
C2:    numeric__times(1 / 2, numeric__plus(r, numeric__divide(x, r))) <= 1 / 4 
          * (x * x) + 1 .


For path(s) from assertion of line 15 to run-time check associated with 
          statement of line 16:

procedure_sqrt_7.
*** true .          /* all conclusions proved */


For path(s) from assertion of line 15 to precondition check associated with 
          statement of line 17:

procedure_sqrt_8.
H1:    r >= - (1 / 4 * (x * x)) + x .
H2:    r <= 1 / 4 * (x * x) + 1 .
H3:    1 <= x .
H4:    x <= 2 .
H5:    r >= - 340282000000000000000000000000000000000 .
H6:    r <= 340282000000000000000000000000000000000 .
H7:    float__size >= 0 .
       ->
C1:    numeric__divide(x, r) >= - 340282000000000000000000000000000000000 .
C2:    numeric__divide(x, r) <= 340282000000000000000000000000000000000 .


For path(s) from assertion of line 15 to precondition check associated with 
          statement of line 17:

procedure_sqrt_9.
H1:    r >= - (1 / 4 * (x * x)) + x .
H2:    r <= 1 / 4 * (x * x) + 1 .
H3:    1 <= x .
H4:    x <= 2 .
H5:    r >= - 340282000000000000000000000000000000000 .
H6:    r <= 340282000000000000000000000000000000000 .
H7:    numeric__divide(x, r) >= - 340282000000000000000000000000000000000 .
H8:    numeric__divide(x, r) <= 340282000000000000000000000000000000000 .
H9:    float__size >= 0 .
       ->
C1:    numeric__plus(r, numeric__divide(x, r)) >= - 
          340282000000000000000000000000000000000 .
C2:    numeric__plus(r, numeric__divide(x, r)) <= 
          340282000000000000000000000000000000000 .


For path(s) from assertion of line 15 to precondition check associated with 
          statement of line 17:

procedure_sqrt_10.
H1:    r >= - (1 / 4 * (x * x)) + x .
H2:    r <= 1 / 4 * (x * x) + 1 .
H3:    1 <= x .
H4:    x <= 2 .
H5:    r >= - 340282000000000000000000000000000000000 .
H6:    r <= 340282000000000000000000000000000000000 .
H7:    numeric__divide(x, r) >= - 340282000000000000000000000000000000000 .
H8:    numeric__divide(x, r) <= 340282000000000000000000000000000000000 .
H9:    numeric__plus(r, numeric__divide(x, r)) >= - 
          340282000000000000000000000000000000000 .
H10:   numeric__plus(r, numeric__divide(x, r)) <= 
          340282000000000000000000000000000000000 .
H11:   float__size >= 0 .
       ->
C1:    numeric__times(1 / 2, numeric__plus(r, numeric__divide(x, r))) >= - 
          340282000000000000000000000000000000000 .
C2:    numeric__times(1 / 2, numeric__plus(r, numeric__divide(x, r))) <= 
          340282000000000000000000000000000000000 .


For path(s) from assertion of line 15 to run-time check associated with 
          statement of line 17:

procedure_sqrt_11.
*** true .          /* all conclusions proved */


For path(s) from start to finish:

procedure_sqrt_12.
H1:    1 <= x .
H2:    x <= 2 .
H3:    numeric__times(1 / 2, x) >= - 340282000000000000000000000000000000000 .
H4:    numeric__times(1 / 2, x) <= 340282000000000000000000000000000000000 .
H5:    numeric__plus(numeric__times(1 / 2, x), 1 / 2) = x .
H6:    float__size >= 0 .
       ->
C1:    numeric__plus(numeric__times(1 / 2, x), 1 / 2) <= (1 + 4 * 
          numeric__epsrel) * exact__sqrt(x) .


For path(s) from assertion of line 15 to finish:

procedure_sqrt_13.
H1:    r >= - (1 / 4 * (x * x)) + x .
H2:    r <= 1 / 4 * (x * x) + 1 .
H3:    1 <= x .
H4:    x <= 2 .
H5:    r >= - 340282000000000000000000000000000000000 .
H6:    r <= 340282000000000000000000000000000000000 .
H7:    numeric__divide(x, r) >= - 340282000000000000000000000000000000000 .
H8:    numeric__divide(x, r) <= 340282000000000000000000000000000000000 .
H9:    numeric__plus(r, numeric__divide(x, r)) >= - 
          340282000000000000000000000000000000000 .
H10:   numeric__plus(r, numeric__divide(x, r)) <= 
          340282000000000000000000000000000000000 .
H11:   numeric__times(1 / 2, numeric__plus(r, numeric__divide(x, r))) >= - 
          340282000000000000000000000000000000000 .
H12:   numeric__times(1 / 2, numeric__plus(r, numeric__divide(x, r))) <= 
          340282000000000000000000000000000000000 .
H13:   numeric__times(1 / 2, numeric__plus(r, numeric__divide(x, r))) = r .
H14:   float__size >= 0 .
       ->
C1:    numeric__times(1 / 2, numeric__plus(r, numeric__divide(x, r))) <= (1 + 4 
          * numeric__epsrel) * exact__sqrt(x) .


