           *******************************************************
                            Listing of SPARK Text
                              Examiner GPL 2012
             Copyright (C) 2012 Altran Praxis Limited, Bath, U.K.
           *******************************************************


                        DATE : 17-MAY-2013 00:59:21.40

Line
   1  package body Riemann is
   2  
   3  function expMinusSquare(x : Float) return Float
   4  is
   5  begin
   6    return PolyPaver.Floats.Exp(-PolyPaver.Floats.Multiply(x,x));
   7  end expMinusSquare;

+++        Flow analysis of subprogram expMinusSquare 
           performed (information-flow mode): no errors found.
--- (  1)  Warning           :405: VCs for statements including real numbers are 
           approximate.

   8  
   9  function erfRiemann(x : Float; n : Integer) return Float
  10  is
  11   stepSize : Float;
  12   stepStart : Float;
  13   valueStart : Float;
  14   result : Float;
  15   step : Integer;
  16  begin
  17   stepSize := PolyPaver.Floats.Divide(x,Float(n));
  18   result := 0.0;
  19   step := 0;
  20   while step < n loop -- for step = 0..(n-1) loop
  21     stepStart := 
  22       -- step * stepSize;
  23       PolyPaver.Floats.Multiply(stepSize, Float(step));
  24     --# assert 
  25     --#     PolyPaver.Interval.Contained_In(
  26     --#         result - PolyPaver.Exact.Integral(0.0,stepStart,PolyPaver.Exact.Exp(-PolyPaver.Exact.Integration_Variable**2))
  27     --#         ,
  28     --#         PolyPaver.Interval.Hull(
  29     --#              - 0.1*Float(step+1)
  30     --#              ,
  31     --#              (1.0-PolyPaver.Exact.Exp(-(x * Float(step)/Float(n))**2))*x/Float(n)
  32     --#              + 0.1*Float(step+1)
  33     --#         )
  34     --#     )
  35     --#     and PolyPaver.Floats.Is_Range(result,-10, 100.0)
  36     --#     and PolyPaver.Integers.Is_Range(n, 1, 100) and PolyPaver.Integers.Is_Range(step, 0, n-1)
  37     --#     and stepStart = PolyPaver.Floats.Multiply(stepSize, Float(step))
  38     --#     and stepSize = PolyPaver.Floats.Divide(x,Float(n));
  39  
  40     -- valueStart := exp(-(stepStart * stepStart));
  41     valueStart := 
  42       PolyPaver.Floats.Exp(-PolyPaver.Floats.Multiply(stepStart,stepStart)); 
  43       -- expMinusSquare(stepStart);
  44     result := 
  45       -- result + stepSize * valueStart;
  46       PolyPaver.Floats.Add(result,PolyPaver.Floats.Multiply(stepSize,valueStart));
  47     step := step + 1;
  48   end loop;
  49   return result;
  50  end erfRiemann;

+++        Flow analysis of subprogram erfRiemann performed 
           (information-flow mode): no errors found.
--- (  2)  Warning           :405: VCs for statements including real numbers are 
           approximate.

  51  
  52  end Riemann;

Note: Flow analysis mode is automatic


--End of file--------------------------------------------------
