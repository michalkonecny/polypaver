           *******************************************************
                            Listing of SPARK Text
                              Examiner GPL 2012
             Copyright (C) 2012 Altran Praxis Limited, Bath, U.K.
           *******************************************************


                        DATE : 17-MAY-2013 19:02:19.14

Line
   1  package body Riemann is
   2  
   3  function erfRiemann(x : Float; n : Integer) return Float
   4  is
   5   stepSize : Float;
   6   stepStart : Float;
   7   valueStart : Float;
   8   result : Float;
   9   step : Integer;
  10  begin
  11   stepSize := PolyPaver.Floats.Divide(x,Float(n));
  12   result := 0.0;
  13   step := 0;
  14   while step < n loop -- for step = 0..(n-1) loop
  15     stepStart := 
  16       -- step * stepSize;
  17       PolyPaver.Floats.Multiply(stepSize, Float(step));
  18     --# assert 
  19     --#     PolyPaver.Interval.Contained_In(
  20     --#         result - PolyPaver.Exact.Integral(0.0,stepStart,PolyPaver.Exact.Exp(-PolyPaver.Exact.Integration_Variable**2))
  21     --#         ,
  22     --#         PolyPaver.Interval.Hull(
  23     --#              - 0.1*Float(step+1)
  24     --#              ,
  25     --#              (1.0-PolyPaver.Exact.Exp(-(x * Float(step)/Float(n))**2))*x/Float(n)
  26     --#              + 0.1*Float(step+1)
  27     --#         )
  28     --#     )
  29     --#     and PolyPaver.Floats.Is_Range(result,-10, 100.0)
  30     --#     and PolyPaver.Integers.Is_Range(n, 1, 100) and PolyPaver.Integers.Is_Range(step, 0, n-1)
  31     --#     and stepStart = PolyPaver.Floats.Multiply(stepSize, Float(step))
  32     --#     and stepSize = PolyPaver.Floats.Divide(x,Float(n));
  33  
  34     valueStart := 
  35       -- valueStart := exp(-(stepStart * stepStart));
  36       PolyPaver.Floats.Exp(-PolyPaver.Floats.Multiply(stepStart,stepStart)); 
  37     result := 
  38       -- result + stepSize * valueStart;
  39       PolyPaver.Floats.Add(result,PolyPaver.Floats.Multiply(stepSize,valueStart));
  40     step := step + 1;
  41   end loop;
  42   return result;
  43  end erfRiemann;

+++        Flow analysis of subprogram erfRiemann performed 
           (information-flow mode): no errors found.
--- (  1)  Warning           :405: VCs for statements including real numbers are 
           approximate.

  44  
  45  end Riemann;

Note: Flow analysis mode is automatic


--End of file--------------------------------------------------
